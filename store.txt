import { Button } from "@/components/ui/button";
import { AudioFile } from "@/type/playlist";
import {Search, Settings2, Upload, X} from "lucide-react";
import React, {useEffect, useRef, useState} from "react";
import PlaylistForm from "./PlaylistForm";
import DragAndDropSongs from "./DragAndDropSongs";
import {DndContext, DragEndEvent} from "@dnd-kit/core";
import {Input} from "@/components/ui/input";
import {DraggableSong} from "@/app/component/sidebar/DraggableSong";
import {DroppableContainer} from "@/app/component/sidebar/DroppableContainer";
import {usePlayListStore} from "@/state/songListState";

interface PlaylistSidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

const uploadAudioFile = async (file: File) => {
  const formData = new FormData();
  formData.append("file", file);

  try {
      const response = await fetch("/api/audio", {
          method: "POST",
          body: formData,
      });

      const data = await response.json();
      if (!response.ok) {
          throw new Error(data.error || "Erreur inconnue");
      }

      console.log("Upload réussi:", data);
      return data;

  } catch (error) {
      console.error("Erreur lors de l'envoi du fichier:", error);
      return null;
  }
};

const fetchAudioFiles = async () => {
  try {
      const response = await fetch("/api/audio", {
          method: "GET",
      });

      const data = await response.json();
      if (!response.ok) {
          throw new Error(data.error || "Erreur inconnue");
      }

      console.log("Données récupérés:", data.data);
      return data.data; // Retourne les fichiers audio

  } catch (error) {
      console.error("Erreur lors de la récupération des fichiers:", error);
      return [];
  }
};

const getAudioDuration = (fileUrl: string): Promise<number> => {

  return new Promise((resolve, reject) => {
      const audio = new Audio();
      const encodedUrl = encodeURIComponent(fileUrl);

      audio.src = `${encodedUrl}`;

      audio.onloadedmetadata = () => {
        const durationInSeconds = audio.duration; // Durée en secondes
        const minutes = Math.floor(durationInSeconds / 60);
        const seconds = Math.floor(durationInSeconds % 60);
        resolve(`${minutes}:${seconds.toString().padStart(2, '0')}`); // Retourne la durée en secondes
      };
      audio.onerror = () => {
          reject(new Error("Impossible de lire la durée de l'audio"));
      };
  });
};


const PlaylistSidebar = ({ isOpen, onClose }: PlaylistSidebarProps) => {

  const [duration, setDuration] = useState("0:00");
  const [activeTab, setActiveTab] = useState("library");
  const [isDragging, setIsDragging] = useState(false);
  const [audioFiles, setAudioFiles] = useState<AudioFile[]>([]);

  useEffect(() => {
    const getAudioFiles = async () => {
        const files = await fetchAudioFiles();

        const filesWithDuration = await Promise.all(
          files.map(async (file: AudioFile) => {
            const duration = await getAudioDuration(file.url)
            setAudioFiles((state: AudioFile[]) => [...state, {...file, duration}])
            return { ...file, duration };
          })
        )

    };

    getAudioFiles();
}, []);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const files = Array.from(e.dataTransfer.files);
    const audioFiles = files.filter(file =>
      file.type.startsWith('audio/') ||
      file.name.endsWith('.mp3') ||
      file.name.endsWith('.wav') ||
      file.name.endsWith('.ogg') ||
      file.name.endsWith('.m4a')
    );

    if (audioFiles.length > 0) {
      console.log('Fichiers audio reçus:', audioFiles);
      // TODO: Gérer l'upload des fichiers
      for (const file of audioFiles) {
        const result = await uploadAudioFile(file);
        const duration = await getAudioDuration(file)
        console.log("Duration: "+ duration)
        if (result) {
            console.log("Fichier uploadé avec succès:", result);
            // TODO: Mettre à jour l'UI (ex: afficher le fichier dans une liste)
        }
      }
    }
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const audioFiles = files.filter(file =>
      file.type.startsWith('audio/') ||
      file.name.endsWith('.mp3') ||
      file.name.endsWith('.wav') ||
      file.name.endsWith('.ogg') ||
      file.name.endsWith('.m4a')
    );

    if (audioFiles.length > 0) {
      console.log('Fichiers audio sélectionnés:', audioFiles);
      // TODO: Gérer l'upload des fichiers
      for (const file of audioFiles) {
        const result = await uploadAudioFile(file);
        if (result) {
            console.log("Fichier uploadé avec succès:", result);
            // TODO: Mettre à jour l'UI (ex: afficher le fichier dans une liste)
        }
      }
    }
  };
    const [leftSongs, setLeftSongs] = useState<AudioFile[]>(audioFiles);
    const { songList: rightSongs, addSong, removeSong } = usePlayListStore();

    const [playingFile, setPlayingFile] = useState<string | null>(null);
    const audioRef = useRef<HTMLAudioElement | null>(null);

    const handlePlayPause = (fileId: string, url: string) => {

        console.log(audioRef)

        if (playingFile === fileId) {
            audioRef.current?.pause();
            setPlayingFile(null);
        } else {
            console.log(audioRef)
            if (audioRef.current) {
                audioRef.current.src = url;
                audioRef.current.play().catch(console.error);
                setPlayingFile(fileId);
            }
        }
    };

    //console.log("Songs", JSON.stringify(leftSongs, null, 2));
    useEffect(() => {
        setLeftSongs(audioFiles)
    }, [audioFiles])

    const handleDragEnd = (event: DragEndEvent) => {
        const { active, over } = event;
        if (!over) return;

        if (over.id === "right" && typeof active.id === 'string') {
            const songId = parseInt(active.id.replace('song-', ''), 10);
            const song = leftSongs.find((s) => s.id === songId);
            if (song && !rightSongs.some(s => s.id === song.id)) {
                addSong(song);
            }
        }
    };

    const isSelected = (songId: number) => {
        return rightSongs.some(song => song.id === songId);
    };
  return (
    <>
      {/* Backdrop semi-transparent */}
      <div
        className={`fixed inset-0 bg-black bg-opacity-40 transition-opacity duration-300
        ${isOpen ? "opacity-100 visible" : "opacity-0 invisible"}`}
        onClick={onClose}
      />

      {/* Sidebar */}
      <div
        className={`fixed inset-y-0 right-0 w-full sm:w-[940px] bg-white shadow-lg transform
        transition-transform duration-300 ${isOpen ? "translate-x-0" : "translate-x-full"}`}
      >
        <div className="h-full flex flex-col">
          {/* Header */}
          <div className="flex justify-between items-center p-4 border-b">
            <h2 className="text-xl font-semibold">Créer une playlist</h2>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-full">
              <X className="h-5 w-5" />
            </button>
          </div>
            <div className="p-4 space-y-4">
              <PlaylistForm />
            </div>

          {/* Content */}
          <div className="flex-1 overflow-hidden flex ">
              <DndContext onDragEnd={handleDragEnd}>
                  <div className="flex gap-8 p-8">
                      <div className="w-1/2">
                          <div className="relative mb-4">
                              <Input placeholder="Rechercher dans ma bibliothèque" className="pl-10 pr-10" />
                              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                              <Settings2 className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                          </div>
                          <audio ref={audioRef} onEnded={() => setPlayingFile(null)} />
                          <div>
                              {leftSongs.map((song) => (
                                  <DraggableSong
                                      key={song.id}
                                      song={song}
                                      isSelected={isSelected(song.id)}
                                      playingFile={playingFile}
                                      handlePlayPause={handlePlayPause}
                                  />
                              ))}
                          </div>
                      </div>

                      <div className="w-1/2">
                          <h2 className="text-2xl font-bold mb-4">Chansons Sélectionnées</h2>
                          <DroppableContainer id="right" extraClasses="min-h-[300px]">
                              {rightSongs.length === 0 ? (
                                  <p className="text-gray-500">Glissez ici les chansons sélectionnées</p>
                              ) : (
                                  rightSongs.map((song) => (
                                      <div
                                          key={song.id}
                                          className="flex items-center gap-4 p-3 border border-gray-200 rounded mb-2 bg-white"
                                      >
                                          <div className="flex-1">
                                              <h3 className="font-medium">{song.title}</h3>
                                          </div>
                                          <button
                                              onClick={() => removeSong(song.id!)}
                                              className="text-red-500 hover:text-red-700"
                                          >
                                              Supprimer
                                          </button>
                                      </div>
                                  ))
                              )}
                          </DroppableContainer>
                      </div>
                  </div>
              </DndContext>
            {/* Tabs */}
            <div className="border-b">
              <div className="flex gap-8 px-4">
                <button
                  className={`py-2 ${activeTab === "library" ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-500 hover:text-gray-700"}`}
                  onClick={() => setActiveTab("library")}
                >
                  Bibliothèque
                </button>
                <button
                  className={`py-2 ${activeTab === "files" ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-500 hover:text-gray-700"}`}
                  onClick={() => setActiveTab("files")}
                >
                  Mes Fichiers
                </button>
              </div>
            </div>

            {/* Content based on active tab */}
            <div className="flex-1 overflow-auto">
              {activeTab === "library" && (
                <div className="p-4">
                  <p className="text-sm text-gray-500 mb-4">Durée totale : {duration}</p>
                  {/* <SongList songs={audioFiles}/> */}
                </div>
              )}

              {activeTab === 'files' && (
              <div className="p-4">
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    isDragging
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  <div className="flex flex-col items-center gap-2">
                    <Upload className="h-8 w-8 text-gray-400" />
                    <p className="text-gray-600">Glissez et déposez vos fichiers audio ici</p>
                    <p className="text-sm text-gray-500">Formats acceptés : MP3, WAV, OGG, M4A</p>
                    <p className="text-sm text-gray-500">ou</p>
                    <div>
                      <input
                        type="file"
                        id="file-upload"
                        className="hidden"
                        multiple
                        accept="audio/*,.mp3,.wav,.ogg,.m4a"
                        onChange={handleFileSelect}
                      />
                      <Button
                        variant="outline"
                        className="text-blue-500 border-blue-500 hover:bg-blue-50"
                        onClick={() => document.getElementById('file-upload')?.click()}
                      >
                        Parcourir les fichiers
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default PlaylistSidebar;
